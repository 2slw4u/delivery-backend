// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using deliveryApp.Models;

#nullable disable

namespace deliveryApp.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231103164517_TokenWithEmail")]
    partial class TokenWithEmail
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("deliveryApp.Models.Entities.AddressElementEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ObjectGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("ObjectId")
                        .HasColumnType("integer");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AddressElementEntity");
                });

            modelBuilder.Entity("deliveryApp.Models.Entities.DishEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsVegetarian")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Photo")
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("Dishes");
                });

            modelBuilder.Entity("deliveryApp.Models.Entities.DishInCartEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<Guid>("DishId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrderEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DishId");

                    b.HasIndex("OrderEntityId");

                    b.HasIndex("UserId");

                    b.ToTable("DishesInCart");
                });

            modelBuilder.Entity("deliveryApp.Models.Entities.HierarchyEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AddressElementId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("HouseId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("ObjectId")
                        .HasColumnType("integer");

                    b.Property<int>("ParentObjId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AddressElementId");

                    b.HasIndex("HouseId");

                    b.ToTable("HierarchyEntity");
                });

            modelBuilder.Entity("deliveryApp.Models.Entities.HouseEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Addnum1")
                        .HasColumnType("integer");

                    b.Property<int>("Addnum2")
                        .HasColumnType("integer");

                    b.Property<int>("Addtype1")
                        .HasColumnType("integer");

                    b.Property<int>("Addtype2")
                        .HasColumnType("integer");

                    b.Property<int>("Housenum")
                        .HasColumnType("integer");

                    b.Property<bool>("Isactive")
                        .HasColumnType("boolean");

                    b.Property<int>("ObjectId")
                        .HasColumnType("integer");

                    b.Property<Guid>("Objectguid")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("HouseEntity");
                });

            modelBuilder.Entity("deliveryApp.Models.Entities.OrderEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AddresId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DeliveryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("OrderTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("deliveryApp.Models.Entities.RatingEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DishId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DishId");

                    b.HasIndex("UserId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("deliveryApp.Models.Entities.TokenEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("userEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("deliveryApp.Models.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FullName");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("deliveryApp.Models.Entities.DishInCartEntity", b =>
                {
                    b.HasOne("deliveryApp.Models.Entities.DishEntity", "Dish")
                        .WithMany()
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("deliveryApp.Models.Entities.OrderEntity", null)
                        .WithMany("DishesInCart")
                        .HasForeignKey("OrderEntityId");

                    b.HasOne("deliveryApp.Models.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("User");
                });

            modelBuilder.Entity("deliveryApp.Models.Entities.HierarchyEntity", b =>
                {
                    b.HasOne("deliveryApp.Models.Entities.AddressElementEntity", "AddressElement")
                        .WithMany("Hierarchies")
                        .HasForeignKey("AddressElementId");

                    b.HasOne("deliveryApp.Models.Entities.HouseEntity", "House")
                        .WithMany("Hierarchy")
                        .HasForeignKey("HouseId");

                    b.Navigation("AddressElement");

                    b.Navigation("House");
                });

            modelBuilder.Entity("deliveryApp.Models.Entities.OrderEntity", b =>
                {
                    b.HasOne("deliveryApp.Models.Entities.HouseEntity", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("deliveryApp.Models.Entities.UserEntity", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("User");
                });

            modelBuilder.Entity("deliveryApp.Models.Entities.RatingEntity", b =>
                {
                    b.HasOne("deliveryApp.Models.Entities.DishEntity", "Dish")
                        .WithMany("Ratings")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("deliveryApp.Models.Entities.UserEntity", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("User");
                });

            modelBuilder.Entity("deliveryApp.Models.Entities.AddressElementEntity", b =>
                {
                    b.Navigation("Hierarchies");
                });

            modelBuilder.Entity("deliveryApp.Models.Entities.DishEntity", b =>
                {
                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("deliveryApp.Models.Entities.HouseEntity", b =>
                {
                    b.Navigation("Hierarchy");
                });

            modelBuilder.Entity("deliveryApp.Models.Entities.OrderEntity", b =>
                {
                    b.Navigation("DishesInCart");
                });

            modelBuilder.Entity("deliveryApp.Models.Entities.UserEntity", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Ratings");
                });
#pragma warning restore 612, 618
        }
    }
}
